最长公共子串，  
dp[i][j] =  0 ;   i = 0或j= 0;
dp[i][j] = dp[i-1][j-1] + 1; i > 0且j> 0 且ch1[i]= ch2[j];
dp[i][j]=  0;    i > 0且j> 0 且ch1[i]!= ch2[j];


最长公共子序列
dp[i][j] =0 ; i = 0或j= 0;
dp[i][j] = dp[i-1][j-1] + 1; i > 0且j> 0 且ch1[i]= ch2[j];
dp[i][j]= max {dp[i-1][j] , dp[i][j-1]};i > 0且j> 0且ch1[i]!= ch2[j];

最长上升或下降子序列 最长不上升或不下降子序列
for（i=1；i<=n;i++){
       dp[i]=1;
       for（k=1;k<i;k++){
            if(ak<ai&&dp[i]<dp[k]+1)
              dp[i]=dp[k]+1;
       }
}
最大子序列和
负数：最大的那个
如果有正数
for（i=1;i<=n;i++){
       dp[i]=dp[i-1]+ai;
       if(dp[i]<0)
          dp[i]=0;
       if(max<dp[i])
          max=dp[i];
}


数塔问题
dp[i][j]表示走到第i行第j个的最大值
dp[i][j]=max{dp[i-1][j-1],dp[i-1][j]}+s[i][j];


